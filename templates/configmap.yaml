apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gitlab-runner.fullname" . }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app: {{ include "gitlab-runner.fullname" . }}
    chart: {{ include "gitlab-runner.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  entrypoint: |
    #!/bin/bash
    set -e

    mkdir -p /home/gitlab-runner/.gitlab-runner/

    cp /configmaps/config.toml /home/gitlab-runner/.gitlab-runner/

    {{- if and (eq (default 1.0 .Values.replicas) 1.0) .Values.sessionServer .Values.sessionServer.enabled }}
    quit() {
      kill -TERM "$child"
    }

    trap quit QUIT TERM

    sh /configmaps/set-session-server-address &
    child=$!
    wait "$child"
    {{- end }}

    {{- range $runner := .Values.runners }}
    {{- if and (not (empty $runner.runnerToken)) (ne "1" ((default "1" $.Values.replicas) | toString)) }}
    {{- fail "Using a runner token with more than 1 replica is not supported." }}
    {{- end -}}
    {{- end }}

    # Validate this also at runtime in case the user has set a custom secret
    {{- range $index, $runner := .Values.runners }}
    if [[ -f /secrets/runner-token-{{ $index }} ]]; then
      if [[ -s /secrets/runner-token-{{ $index }} && "{{ default 1 $.Values.replicas }}" -ne "1" ]]; then
        echo "Using a runner token with more than 1 replica is not supported."
        exit 1
      fi
    fi
    {{- end }}

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = {{ .Values.concurrent }}
    check_interval = {{ .Values.checkInterval }}
    log_level = {{ default "info" .Values.logLevel | quote }}
    {{- if .Values.logFormat }}
    log_format = {{ .Values.logFormat | quote }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
    listen_address = ':9252'
    {{- end }}
    {{- if .Values.sentryDsn }}
    sentry_dsn = "{{ .Values.sentryDsn }}"
    {{- end }}
    {{- if and (eq (default 1.0 .Values.replicas) 1.0) .Values.sessionServer .Values.sessionServer.enabled }}
    [session_server]
      session_timeout = {{ include "gitlab-runner.server-session-timeout" . }}
      listen_address = "0.0.0.0:{{ include "gitlab-runner.server-session-internal-port" . }}"
      advertise_address = "SESSION_SERVER_IP:{{ include "gitlab-runner.server-session-external-port" . }}"
    {{- end }}

  {{- range $index, $runner := .Values.runners }}  
  {{ if $runner.config }}
  config.templates.toml-{{ $index }}: {{ tpl (toYaml $runner.config) $ | indent 2 }}
  {{ end }}
  {{ end }}

  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    {{- range $index, $runner := .Values.runners }}
    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"

      if [[ -f /secrets/runner-registration-token-{{ $index }} ]]; then
        export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token-{{ $index }})
      fi

      if [[ -f /secrets/runner-token-{{ $index }} ]]; then
        export CI_SERVER_TOKEN=$(cat /secrets/runner-token-{{ $index }})
      fi
      /entrypoint register --non-interactive  --template-config /configmaps/config.templates.toml-{{ $index }} \
      --executor {{ default "kubernetes" $runner.executor | quote }}          
      {{- if $runner.config -}}{{- if (not (regexMatch "\\s*namespace\\s*=" $runner.config)) }} --kubernetes-namespace {{ default $.Release.Namespace | quote }} {{- end -}}{{- end -}}       
      {{- if $runner.serviceAccountName }} --kubernetes-service-account {{ $runner.serviceAccountName }} {{- end -}}         
      {{- if and (hasKey $runner "name") $runner.name }} --name={{ $runner.name | quote -}} {{- end -}}
      {{ if or (not (hasKey $runner "locked")) $runner.locked }} --locked {{ end -}}
      {{- range $key, $value := $runner.env }} --env {{ $key | quote -}} = {{- $value | quote }} {{- end -}}
      {{- if and (hasKey $runner "runUntagged") $runner.runUntagged }} --run-untagged=true {{- end -}}
      {{- if $runner.tags }} --tag-list {{ $runner.tags }} {{- end -}}                   
      {{- if and (hasKey $runner "protected") $runner.protected }} --access-level="ref_protected" {{- end -}}
      {{- if default "" $runner.cacheSecretName | hasPrefix "s3access" }} --cache-s3-access-key $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/accesskey) --cache-s3-secret-key $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/secretkey) {{- end -}}
      {{- if default "" $runner.cacheSecretName | hasPrefix "google-application-credentials" }} --cache-gcs-credentials-file /secrets/{{ $runner.cacheSecretName -}}-{{ $index }} {{- end -}}          
      {{- if default "" $runner.cacheSecretName | hasPrefix "gcsaccess" }} --cache-gcs-access-id $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/gcs-access-id) --cache-gcs-private-key $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/gcs-private-key) {{- end -}}   
      {{- if default "" $runner.cacheSecretName | hasPrefix "azureaccess" }} --cache-azure-account-name $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/azure-account-name) --cache-azure-account-key $(cat /secrets/{{ $runner.cacheSecretName }}-{{ $index }}/azure-account-key) {{- end}}                       

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done
    unset REGISTRATION_TOKEN CI_SERVER_TOKEN
    {{- end}}

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi

  {{- if and (eq (default 1.0 .Values.replicas) 1.0) .Values.sessionServer .Values.sessionServer.enabled }}
  set-session-server-address: |
    #!/bin/bash

    {{- if (not .Values.sessionServer.publicIP) }}
    APISERVER=https://kubernetes.default.svc \
      && SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount \
      && NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace) \
      && TOKEN=$(cat ${SERVICEACCOUNT}/token) \
      && CACERT=${SERVICEACCOUNT}/ca.crt \
      && header="Authorization: Bearer ${TOKEN}"

    SERVICEURL=${APISERVER}/api/v1/namespaces/${NAMESPACE}/services/{{ include "gitlab-runner.fullname" . }}-session-server

    has_address=false
    while [ "${has_address}" = false ]; do
      SERVICEIP=$(curl —-silent \
        --cacert ${CACERT} \
        --header "${header}" \
        -X GET ${SERVICEURL} 2>/dev/null \
        | grep '"ip":' | cut -d ":" -f2 | xargs)

      # for aws, the hostname is available but not the external IP
      SERVICEHOSTNAME=$(curl —-silent \
        --cacert ${CACERT} \
        --header "${header}" \
        -X GET ${SERVICEURL} 2>/dev/null \
        | grep '"hostname":' | cut -d ":" -f2 | xargs)

      ADDRESS="${SERVICEHOSTNAME:-$SERVICEIP}"
      
      if [ -z "${ADDRESS}" ]
      then
        echo "Service LoadBalancer External Address not yet available"
        has_address=false
        sleep 5
      else
        has_address=true
        sed -i -e "s/SESSION_SERVER_IP/${ADDRESS}/g" /home/gitlab-runner/.gitlab-runner/config.toml
      fi
    done
    {{- else }}
    sed -i -e "s/SESSION_SERVER_IP/{{ .Values.sessionServer.publicIP }}/g" /home/gitlab-runner/.gitlab-runner/config.toml
    {{- end}}
  {{ end }}

  pre-entrypoint-script: |
{{ .Values.preEntrypointScript | default "" | indent 4 }}

{{ if not (empty .Values.configMaps) }}{{ toYaml .Values.configMaps | indent 2 }}{{ end }}
